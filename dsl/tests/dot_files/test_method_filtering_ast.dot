digraph "reductionWithFiltering" {  
"1000101" [label = "(METHOD,reductionWithFiltering)" ]
"1000102" [label = "(PARAM,this)" ]
"1000103" [label = "(PARAM,boolean chk)" ]
"1000104" [label = "(BLOCK,<empty>,<empty>)" ]
"1000105" [label = "(LOCAL,int p: int)" ]
"1000106" [label = "(<operator>.assignment,p = 2)" ]
"1000107" [label = "(IDENTIFIER,p,p = 2)" ]
"1000108" [label = "(LITERAL,2,p = 2)" ]
"1000109" [label = "(<operator>.assignment,p = 4)" ]
"1000110" [label = "(IDENTIFIER,p,p = 4)" ]
"1000111" [label = "(LITERAL,4,p = 4)" ]
"1000112" [label = "(LOCAL,int k: int)" ]
"1000113" [label = "(<operator>.assignment,k = 4 * p + 2)" ]
"1000114" [label = "(IDENTIFIER,k,k = 4 * p + 2)" ]
"1000115" [label = "(<operator>.addition,4 * p + 2)" ]
"1000116" [label = "(<operator>.multiplication,4 * p)" ]
"1000117" [label = "(LITERAL,4,4 * p)" ]
"1000118" [label = "(IDENTIFIER,p,4 * p)" ]
"1000119" [label = "(LITERAL,2,4 * p + 2)" ]
"1000120" [label = "(CONTROL_STRUCTURE,try,try)" ]
"1000121" [label = "(BLOCK,try,try)" ]
"1000122" [label = "(println,System.out.println(\"Inside try!\"))" ]
"1000123" [label = "(IDENTIFIER,System.out,System.out.println(\"Inside try!\"))" ]
"1000124" [label = "(LITERAL,\"Inside try!\",System.out.println(\"Inside try!\"))" ]
"1000125" [label = "(BLOCK,catch,catch)" ]
"1000126" [label = "(BLOCK,<empty>,<empty>)" ]
"1000127" [label = "(println,System.out.println(e.getLocalizedMessage()))" ]
"1000128" [label = "(IDENTIFIER,System.out,System.out.println(e.getLocalizedMessage()))" ]
"1000129" [label = "(getLocalizedMessage,e.getLocalizedMessage())" ]
"1000130" [label = "(IDENTIFIER,e,e.getLocalizedMessage())" ]
"1000131" [label = "(CONTROL_STRUCTURE,try,try)" ]
"1000132" [label = "(BLOCK,try,try)" ]
"1000133" [label = "(LOCAL,int b: int)" ]
"1000134" [label = "(<operator>.assignment,b = 0)" ]
"1000135" [label = "(IDENTIFIER,b,b = 0)" ]
"1000136" [label = "(LITERAL,0,b = 0)" ]
"1000137" [label = "(<operator>.assignment,k = p / b)" ]
"1000138" [label = "(IDENTIFIER,k,k = p / b)" ]
"1000139" [label = "(<operator>.division,p / b)" ]
"1000140" [label = "(IDENTIFIER,p,p / b)" ]
"1000141" [label = "(IDENTIFIER,b,p / b)" ]
"1000142" [label = "(BLOCK,catch,catch)" ]
"1000143" [label = "(BLOCK,<empty>,<empty>)" ]
"1000144" [label = "(println,System.out.println(e.getMessage()))" ]
"1000145" [label = "(IDENTIFIER,System.out,System.out.println(e.getMessage()))" ]
"1000146" [label = "(getMessage,e.getMessage())" ]
"1000147" [label = "(IDENTIFIER,e,e.getMessage())" ]
"1000148" [label = "(exit,System.exit(0))" ]
"1000149" [label = "(IDENTIFIER,System,System.exit(0))" ]
"1000150" [label = "(LITERAL,0,System.exit(0))" ]
"1000151" [label = "(CONTROL_STRUCTURE,if (p > 2),if (p > 2))" ]
"1000152" [label = "(<operator>.greaterThan,p > 2)" ]
"1000153" [label = "(IDENTIFIER,p,p > 2)" ]
"1000154" [label = "(LITERAL,2,p > 2)" ]
"1000155" [label = "(BLOCK,<empty>,<empty>)" ]
"1000156" [label = "(println,System.out.println(\"P two!\"))" ]
"1000157" [label = "(IDENTIFIER,System.out,System.out.println(\"P two!\"))" ]
"1000158" [label = "(LITERAL,\"P two!\",System.out.println(\"P two!\"))" ]
"1000159" [label = "(exit,System.exit(2))" ]
"1000160" [label = "(IDENTIFIER,System,System.exit(2))" ]
"1000161" [label = "(LITERAL,2,System.exit(2))" ]
"1000162" [label = "(CONTROL_STRUCTURE,while (p > 0),while (p > 0))" ]
"1000163" [label = "(<operator>.greaterThan,p > 0)" ]
"1000164" [label = "(IDENTIFIER,p,p > 0)" ]
"1000165" [label = "(LITERAL,0,p > 0)" ]
"1000166" [label = "(BLOCK,<empty>,<empty>)" ]
"1000167" [label = "(<operator>.postDecrement,p--)" ]
"1000168" [label = "(IDENTIFIER,p,p--)" ]
"1000169" [label = "(print,System.out.print(\"Reducing p!\"))" ]
"1000170" [label = "(IDENTIFIER,System.out,System.out.print(\"Reducing p!\"))" ]
"1000171" [label = "(LITERAL,\"Reducing p!\",System.out.print(\"Reducing p!\"))" ]
"1000172" [label = "(METHOD_RETURN,void)" ]
  "1000101" -> "1000102"  [ label = "AST: "] 
  "1000101" -> "1000103"  [ label = "AST: "] 
  "1000101" -> "1000104"  [ label = "AST: "] 
  "1000101" -> "1000172"  [ label = "AST: "] 
  "1000104" -> "1000105"  [ label = "AST: "] 
  "1000104" -> "1000106"  [ label = "AST: "] 
  "1000104" -> "1000109"  [ label = "AST: "] 
  "1000104" -> "1000112"  [ label = "AST: "] 
  "1000104" -> "1000113"  [ label = "AST: "] 
  "1000104" -> "1000120"  [ label = "AST: "] 
  "1000104" -> "1000131"  [ label = "AST: "] 
  "1000104" -> "1000151"  [ label = "AST: "] 
  "1000104" -> "1000162"  [ label = "AST: "] 
  "1000106" -> "1000107"  [ label = "AST: "] 
  "1000106" -> "1000108"  [ label = "AST: "] 
  "1000109" -> "1000110"  [ label = "AST: "] 
  "1000109" -> "1000111"  [ label = "AST: "] 
  "1000113" -> "1000114"  [ label = "AST: "] 
  "1000113" -> "1000115"  [ label = "AST: "] 
  "1000115" -> "1000116"  [ label = "AST: "] 
  "1000115" -> "1000119"  [ label = "AST: "] 
  "1000116" -> "1000117"  [ label = "AST: "] 
  "1000116" -> "1000118"  [ label = "AST: "] 
  "1000120" -> "1000121"  [ label = "AST: "] 
  "1000120" -> "1000125"  [ label = "AST: "] 
  "1000121" -> "1000122"  [ label = "AST: "] 
  "1000122" -> "1000123"  [ label = "AST: "] 
  "1000122" -> "1000124"  [ label = "AST: "] 
  "1000125" -> "1000126"  [ label = "AST: "] 
  "1000126" -> "1000127"  [ label = "AST: "] 
  "1000127" -> "1000128"  [ label = "AST: "] 
  "1000127" -> "1000129"  [ label = "AST: "] 
  "1000129" -> "1000130"  [ label = "AST: "] 
  "1000131" -> "1000132"  [ label = "AST: "] 
  "1000131" -> "1000142"  [ label = "AST: "] 
  "1000132" -> "1000133"  [ label = "AST: "] 
  "1000132" -> "1000134"  [ label = "AST: "] 
  "1000132" -> "1000137"  [ label = "AST: "] 
  "1000134" -> "1000135"  [ label = "AST: "] 
  "1000134" -> "1000136"  [ label = "AST: "] 
  "1000137" -> "1000138"  [ label = "AST: "] 
  "1000137" -> "1000139"  [ label = "AST: "] 
  "1000139" -> "1000140"  [ label = "AST: "] 
  "1000139" -> "1000141"  [ label = "AST: "] 
  "1000142" -> "1000143"  [ label = "AST: "] 
  "1000143" -> "1000144"  [ label = "AST: "] 
  "1000143" -> "1000148"  [ label = "AST: "] 
  "1000144" -> "1000145"  [ label = "AST: "] 
  "1000144" -> "1000146"  [ label = "AST: "] 
  "1000146" -> "1000147"  [ label = "AST: "] 
  "1000148" -> "1000149"  [ label = "AST: "] 
  "1000148" -> "1000150"  [ label = "AST: "] 
  "1000151" -> "1000152"  [ label = "AST: "] 
  "1000151" -> "1000155"  [ label = "AST: "] 
  "1000152" -> "1000153"  [ label = "AST: "] 
  "1000152" -> "1000154"  [ label = "AST: "] 
  "1000155" -> "1000156"  [ label = "AST: "] 
  "1000155" -> "1000159"  [ label = "AST: "] 
  "1000156" -> "1000157"  [ label = "AST: "] 
  "1000156" -> "1000158"  [ label = "AST: "] 
  "1000159" -> "1000160"  [ label = "AST: "] 
  "1000159" -> "1000161"  [ label = "AST: "] 
  "1000162" -> "1000163"  [ label = "AST: "] 
  "1000162" -> "1000166"  [ label = "AST: "] 
  "1000163" -> "1000164"  [ label = "AST: "] 
  "1000163" -> "1000165"  [ label = "AST: "] 
  "1000166" -> "1000167"  [ label = "AST: "] 
  "1000166" -> "1000169"  [ label = "AST: "] 
  "1000167" -> "1000168"  [ label = "AST: "] 
  "1000169" -> "1000170"  [ label = "AST: "] 
  "1000169" -> "1000171"  [ label = "AST: "] 
}
